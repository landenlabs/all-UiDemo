apply plugin: 'com.android.application'

// String outputDirFramework = file('../dist').getPath();

android {
    signingConfigs {
        release
    }
    compileSdkVersion 28

    // As of gradle 3.x this is no longer needed.
    // buildToolsVersion '26.0.2'

    defaultConfig {
        applicationId 'com.landenlabs.all_uidemo'
        minSdkVersion 19
        targetSdkVersion 28
        versionName '1.11'
        versionCode 111

        // renderscriptTargetApi 23
        // renderscriptSupportModeEnabled true
        signingConfig signingConfigs.release
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            /*
            applicationVariants.all { variant ->
                appendVersionNameVersionCode(variant, defaultConfig)
            }
            */
            signingConfig signingConfigs.release
        }
        debug {
            renderscriptDebuggable true
        }
    }

    lintOptions {
        abortOnError false
        disable 'DefaultLocale', 'SimpleDateFormat', 'InflateParams', 'SpUsage',
                'UseCompoundDrawables', 'HandlerLeak', 'ViewConstructor', 'SetTextI18n',
                'RtlSymmetry', 'RtlHardcoded', 'ContentDescription',
                'MissingTranslation', 'ValidFragment', 'UnusedAttribute',
                'FieldCanBeLocal', 'LocalSuppress', 'HardcodedText', 'Typos'
    }

    productFlavors {
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    sourceSets {
        main {
            renderscript.srcDirs = ['src']
            // res.srcDirs = ['res']
            // assets.srcDirs = ['assets']
        }
    }

    /*
    preBuild << {
        println gradle.gradleHomeDir
        File distFolder = new File(outputDirFramework);
        if (!distFolder.exists()) {
            println distFolder.mkdirs();
        }
    }
    */

    // This code is for copying aar files to dist folder.
    /*
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                def fileName = outputFile.name.replace(".apk", "-v" + defaultConfig.versionCode + ".apk")
                fileName = fileName.replace("app-", "all-UiDemo-")
                output.setOutputFile( new File(outputDirFramework, fileName))
            }
        }
    }
    */
    android.applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "all-UiDemo-${variant.name}-${variant.versionName}.apk"
            println "out name= $outputFileName"
        }
    }

    // Load signing config.
    def props = new Properties()
    props.load(new FileInputStream(rootProject.file("release.properties")))
    android.signingConfigs.release.storeFile rootProject.file(props.keyStore)
    android.signingConfigs.release.storePassword props.keyStorePassword
    android.signingConfigs.release.keyAlias props.keyAlias
    android.signingConfigs.release.keyPassword props.keyAliasPassword

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:support-v4:28.0.0'
    implementation 'com.android.support:support-media-compat:28.0.0'
    implementation 'com.android.support:percent:28.0.0'
    implementation 'com.android.support:design:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.google.android.gms:play-services-analytics:16.0.6'
    implementation 'net.hockeyapp.android:HockeySDK:5.1.1'
}