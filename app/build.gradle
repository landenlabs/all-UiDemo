apply plugin: 'com.android.application'

String outputDirFramework = file('../dist').getPath();

android {
    signingConfigs {
        release
    }
    compileSdkVersion 25
    buildToolsVersion '25.0.2'
    defaultConfig {
        applicationId 'com.landenlabs.all_uidemo'
        minSdkVersion 17
        targetSdkVersion 25
        versionName '1.09'
        versionCode 109

        // renderscriptTargetApi 23
        // renderscriptSupportModeEnabled true
        signingConfig signingConfigs.release
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            /*
            applicationVariants.all { variant ->
                appendVersionNameVersionCode(variant, defaultConfig)
            }
            */
            signingConfig signingConfigs.release
        }
        debug {
            renderscriptDebuggable true
        }
    }

    lintOptions {
        abortOnError false
        disable 'DefaultLocale', 'SimpleDateFormat', 'InflateParams', 'SpUsage',
                'UseCompoundDrawables', 'HandlerLeak', 'ViewConstructor', 'SetTextI18n',
                'RtlSymmetry', 'RtlHardcoded', 'ContentDescription',
                'MissingTranslation', 'ValidFragment', 'UnusedAttribute'
    }

    productFlavors {
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    sourceSets {
        main {
            renderscript.srcDirs = ['src']
            // res.srcDirs = ['res']
            // assets.srcDirs = ['assets']
        }
    }

    preBuild << {
        println gradle.gradleHomeDir
        File distFolder = new File(outputDirFramework);
        if (!distFolder.exists()) {
            println distFolder.mkdirs();
        }
    }

    // This code is for copying aar files to dist folder.
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                def fileName = outputFile.name.replace(".apk", "-v" + defaultConfig.versionCode + ".apk")
                fileName = fileName.replace("app-", "all-UiDemo-");
                output.outputFile = new File(outputDirFramework, fileName)
            }
        }
    }
    
    // Load signing config.
    def props = new Properties()
    props.load(new FileInputStream(rootProject.file("release.properties")))
    android.signingConfigs.release.storeFile rootProject.file(props.keyStore)
    android.signingConfigs.release.storePassword props.keyStorePassword
    android.signingConfigs.release.keyAlias props.keyAlias
    android.signingConfigs.release.keyPassword props.keyAliasPassword
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:25.2.0'
    compile 'com.android.support:percent:25.2.0'
    compile 'com.android.support:design:25.2.0'
    compile 'com.google.android.gms:play-services-analytics:9.6.1'
    compile 'net.hockeyapp.android:HockeySDK:4.1.1'
}